;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10 -*-

;;; Copyright (c) 2009-2012 Gustavo Henrique Milar√©
;;; See the file license for license information.

;;; This file has been auto-generated by a modified version of
;;; Verrazano (it's output was much better than SWIG's for this
;;; library) and manually edited. The modification in Verrazano is to
;;; use gccxml's default name of function nodes instead of the mangled
;;; one, since we are not working with C++.

#+nil
(verrazano:generate-binding
 (list :cffi
       :package-name :dec-number-cffi-aux
       :input-files '("decContext.h" "decNumber.h"
                      "decimal32.h" "decimal64.h" "decimal128.h"
                      "decSingle.h" "decDouble.h" "decQuad.h"
                      "decPacked.h")
       :working-directory (asdf:system-relative-pathname :decimal-floats "cffi/")
       :gccxml-flags (concatenate 'string "-I "
                                  (namestring
                                   (asdf:system-relative-pathname
                                    :decimal-floats "cffi/decNumber/"))
                                  ;; The library emits warnings for
                                  ;; using decQuad if DECNUMDIGITS is
                                  ;; smaller than 34 because it is
                                  ;; unsafe.
                                  " -D DECNUMDIGITS=34")))

(in-package :dec-number-cffi)

;;; Flags of decNumber bits
(defconstant +flag-neg+  #x80)
(defconstant +flag-inf+  #x40)
(defconstant +flag-qnan+ #x20)
(defconstant +flag-snan+ #x10)
(defconstant +flag-special+ (logior +flag-inf+ +flag-qnan+ +flag-snan+))

(defconstant +decnumber-pmax+  999999999)
(defconstant +decnumber-emax+  999999999)
(defconstant +decnumber-emin+ -999999999)
(defconstant +decnumber-exponent-digits+ 9)

(defconstant +decfloat-neg+ #x80000000)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (locally
      (declare #+sbcl(optimize sb-ext:inhibit-warnings))
    (cond
      ((<= +decdpun+ 2)
       (defctype decnumber-unit :uint8)
       (defconstant +decnumber-unit-size+ 8))
      ((<= +decdpun+ 4)
       (defctype decnumber-unit :uint16)
       (defconstant +decnumber-unit-size+ 16))
      ((<= +decdpun+ 9)
       (defctype decnumber-unit :uint32)
       (defconstant +decnumber-unit-size+ 32))
      (t (error "This value of DECDPUN (~a) is not supported." +decdpun+)))))

(defcstruct decnumber
  (digits :int32)
  (exponent :int32)
  (bits :uint8)
  (lsu decnumber-unit))

(defcstruct decimal-32
  (bytes :uint8 :count 4))

(defcstruct decimal-64
  (bytes :uint8 :count 8))

(defcstruct decimal-128
  (bytes :uint8 :count 16))

;;; Constants for single type
(defconstant +single-bytes+ 4)
(defconstant +single-pmax+ 7)
(defconstant +single-emin+ -95)
(defconstant +single-emax+ 96)
(defconstant +single-string-size+ 16)

(defcunion single
  (bytes :uint8 :count 4)
  (shorts :uint16 :count 2)
  (words :uint32 :count 1))

(defcstruct decnumber-single
  (digits :int32)
  (exponent :int32)
  (bits :uint8)
  (lsu decnumber-unit :count #.(ceiling +single-pmax+ +decdpun+)))

;;; Constants for double type
(defconstant +double-bytes+ 8)
(defconstant +double-pmax+ 16)
(defconstant +double-emin+ -383)
(defconstant +double-emax+ 384)
(defconstant +double-string-size+ 25)

(defcunion double
  (bytes :uint8 :count 8)
  (shorts :uint16 :count 4)
  (words :uint32 :count 2))

(defcstruct decnumber-double
  (digits :int32)
  (exponent :int32)
  (bits :uint8)
  (lsu decnumber-unit :count #.(ceiling +double-pmax+ +decdpun+)))

;;; Constants for quad type
(defconstant +quad-bytes+ 16)
(defconstant +quad-pmax+ 34)
(defconstant +quad-emin+ -6143)
(defconstant +quad-emax+ 6144)
(defconstant +quad-string-size+ 43)

(defcunion quad
  (bytes :uint8 :count 16)
  (shorts :uint16 :count 8)
  (words :uint32 :count 4))

(defcstruct decnumber-quad
  (digits :int32)
  (exponent :int32)
  (bits :uint8)
  (lsu decnumber-unit :count #.(ceiling +quad-pmax+ +decdpun+)))

(defcenum rounding
  (:round-ceiling 0)
  (:round-up 1)
  (:round-half-up 2)
  (:round-half-even 3)
  (:round-half-down 4)
  (:round-down 5)
  (:round-floor 6)
  (:round-05up 7)
  (:round-max 8))

(defcstruct context
  (digits :int32)
  (emax :int32)
  (emin :int32)
  (round rounding)
  (traps :uint32)
  (status :uint32)
  (clamp :uint8))

(defbitfield (conditions :uint32)
  :conversion-syntax
  :division-by-zero
  :division-impossible
  :division-undefined
  :insufficient-storage
  :inexact
  :invalid-context
  :invalid-operation
  :lost-digits
  :overflow
  :clamped
  :rounded
  :subnormal
  :underflow)

(defcenum class
  (:snan 0)
  (:qnan 1)
  (:neg-inf 2)
  (:neg-normal 3)
  (:neg-subnormal 4)
  (:neg-zero 5)
  (:pos-zero 6)
  (:pos-subnormal 7)
  (:pos-normal 8)
  (:pos-inf 9))

(defcenum (default-context :uint32)
  (:base-context    0)
  (:single-context 32)
  (:double-context 64)
  (:quad-context  128))


(defcfun ("decDoubleToIntegralValue" %double-to-integral-value) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 rounding))

(defcfun ("decPackedToNumber" %packed-to-number) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decimal32ToEngString" %decimal-32-to-eng-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decDoubleIsFinite" %double-is-finite) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decimal32Canonical" %decimal-32-canonical) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleSetExponent" %double-set-exponent) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int32))

(defcfun ("decDoubleToPacked" %double-to-packed) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadToInt32Exact" %quad-to-int32-exact) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 rounding))

(defcfun ("decDoubleScaleB" %double-scaleb) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decimal128FromNumber" %decimal-128-from-number) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberLogB" %number-logb) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadToUInt32Exact" %quad-to-uint32-exact) :uint32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 rounding))

(defcfun ("decNumberRemainderNear" %number-remainder-near) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadIsNormal" %quad-is-normal) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decDoubleToEngString" %double-to-eng-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decQuadCompare" %quad-compare) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadIsSignaling" %quad-is-signaling) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decDoubleShift" %double-shift) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decimal32IsCanonical" %decimal-32-is-canonical) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decNumberNormalize" %number-normalize) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadMaxMag" %quad-max-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleMultiply" %double-multiply) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleSubtract" %double-subtract) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberDivideInteger" %number-divide-integer) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleIsNormal" %double-is-normal) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadIsNegative" %quad-is-negative) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadReduce" %quad-reduce) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleLogB" %double-logb) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberDivide" %number-divide) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decContextSetStatus" %context-set-status) :pointer
  (arg1 :pointer)
  (arg2 conditions))

(defcfun ("decQuadRemainder" %quad-remainder) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleMinMag" %double-min-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadToString" %quad-to-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decDoubleToUInt32Exact" %double-to-uint32-exact) :uint32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 rounding))

(defcfun ("decQuadIsSignalling" %quad-is-signalling) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadShift" %quad-shift) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberCompare" %number-compare) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberFMA" %number-fma) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer))

(defcfun ("decQuadCompareTotal" %quad-compare-total) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberMax" %number-max) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleSetCoefficient" %double-set-coefficient) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int32))

(defcfun ("decNumberGetBCD" %number-get-bcd) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleDivideInteger" %double-divide-integer) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decSingleToBCD" %single-to-bcd) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadFromPackedChecked" %quad-from-packed-checked) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer))

(defcfun ("decQuadQuantize" %quad-quantize) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decContextGetStatus" %context-get-status) conditions
  (arg1 :pointer))

(defcfun ("decNumberMin" %number-min) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberRotate" %number-rotate) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberInvert" %number-invert) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadIsPositive" %quad-is-positive) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadIsSigned" %quad-is-signed) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decDoubleCopySign" %double-copy-sign) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadGetCoefficient" %quad-get-coefficient) :int32
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decContextStatusToString" %context-status-to-string) :string
  (arg1 :pointer))

(defcfun ("decQuadSetExponent" %quad-set-exponent) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int32))

(defcfun ("decDoubleIsSigned" %double-is-signed) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadToIntegralValue" %quad-to-integral-value) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 rounding))

(defcfun ("decNumberNextMinus" %number-next-minus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decimal128ToString" %decimal-128-to-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decDoubleIsInfinite" %double-is-infinite) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decNumberXor" %number-xor) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decimal64FromString" %decimal-64-from-string) :pointer
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :pointer))

(defcfun ("decQuadMinus" %quad-minus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadCanonical" %quad-canonical) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decSingleFromBCD" %single-from-bcd) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer)
  (arg4 :int32))

(defcfun ("decContextSetStatusFromStringQuiet"
               %context-set-status-from-string-quiet) :pointer
  (arg1 :pointer)
  (arg2 :string))

(defcfun ("decQuadToInt32" %quad-to-int32) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 rounding))

(defcfun ("decDoubleFromInt32" %double-from-int32) :pointer
  (arg1 :pointer)
  (arg2 :int32))

(defcfun ("decQuadFromUInt32" %quad-from-uint32) :pointer
  (arg1 :pointer)
  (arg2 :uint32))

(defcfun ("decNumberFromInt32" %number-from-int32) :pointer
  (arg1 :pointer)
  (arg2 :int32))

(defcfun ("decQuadIsFinite" %quad-is-finite) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadCompareTotalMag" %quad-compare-total-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleFromWider" %double-from-wider) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleGetExponent" %double-get-exponent) :int32
  (arg1 :pointer))

(defcfun ("decNumberAbs" %number-abs) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decSingleFromPackedChecked" %single-from-packed-checked) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer))

(defcfun ("decQuadVersion" %quad-version) :pointer)

(defcfun ("decDoubleRadix" %double-radix) :uint32
  (arg1 :pointer))

(defcfun ("decDoubleMaxMag" %double-max-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decContextZeroStatus" %context-zero-status) :pointer
  (arg1 :pointer))

(defcfun ("decNumberToString" %number-to-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decDoubleNextToward" %double-next-toward) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberToIntegralExact" %number-to-integral-exact) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadIsInteger" %quad-is-integer) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decDoubleAbs" %double-abs) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleReduce" %double-reduce) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadClassString" %quad-class-string) :pointer
  (arg1 :pointer))

(defcfun ("decDoubleIsNaN" %double-is-nan) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decDoubleIsInteger" %double-is-integer) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadDigits" %quad-digits) :uint32
  (arg1 :pointer))

(defcfun ("decQuadIsZero" %quad-is-zero) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decNumberCopyAbs" %number-copy-abs) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decimal128FromString" %decimal-128-from-string) :pointer
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :pointer))

(defcfun ("decNumberShift" %number-shift) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decimal64ToEngString" %decimal-64-to-eng-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decNumberClassToString" %number-class-to-string) :string
  (arg1 class))

(defcfun ("decNumberSquareRoot" %number-square-root) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberZero" %number-zero) :pointer
  (arg1 :pointer))

(defcfun ("decDoubleCompareSignal" %double-compare-signal) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleAnd" %double-and) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadToEngString" %quad-to-eng-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decNumberSetBCD" %number-set-bcd) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :uint32))

(defcfun ("decQuadRadix" %quad-radix) :uint32
  (arg1 :pointer))

(defcfun ("decSingleSetCoefficient" %single-set-coefficient) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int32))

(defcfun ("decDoubleOr" %double-or) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberMaxMag" %number-max-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberVersion" %number-version) :string)

(defcfun ("decQuadCopyAbs" %quad-copy-abs) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decQuadMax" %quad-max) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decContextTestStatus" %context-test-status) conditions
  (arg1 :pointer)
  (arg2 conditions))

(defcfun ("decDoubleCopy" %double-copy) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleToInt32Exact" %double-to-int32-exact) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 rounding))

(defcfun ("decNumberIsNormal" %number-is-normal) (:boolean :int32)
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decimal128ToEngString" %decimal-128-to-eng-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decContextTestEndian" %context-test-endian) (:boolean :int32)
  (arg1 :uint8))

(defcfun ("decQuadIsCanonical" %quad-is-canonical) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decDoubleZero" %double-zero) :pointer
  (arg1 :pointer))

(defcfun ("decNumberRescale" %number-rescale) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decimal128Canonical" %decimal-128-canonical) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleToIntegralExact" %double-to-integral-exact) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleToUInt32" %double-to-uint32) :uint32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 rounding))

(defcfun ("decNumberFromUInt32" %number-from-uint32) :pointer
  (arg1 :pointer)
  (arg2 :uint32))

(defcfun ("decQuadAbs" %quad-abs) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decContextSetStatusFromString" %context-set-status-from-string) :pointer
  (arg1 :pointer)
  (arg2 :string))

(defcfun ("decQuadAdd" %quad-add) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadNextMinus" %quad-next-minus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleFromPackedChecked" %double-from-packed-checked) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer))

(defcfun ("decDoubleMinus" %double-minus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decContextSetStatusQuiet" %context-set-status-quiet) :pointer
  (arg1 :pointer)
  (arg2 conditions))

(defcfun ("decNumberFromString" %number-from-string) :pointer
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :pointer))

(defcfun ("decContextSetRounding" %context-set-rounding) :pointer
  (arg1 :pointer)
  (arg2 rounding))

(defcfun ("decDoubleFromPacked" %double-from-packed) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer))

(defcfun ("decQuadFromInt32" %quad-from-int32) :pointer
  (arg1 :pointer)
  (arg2 :int32))

(defcfun ("decQuadMultiply" %quad-multiply) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decimal128IsCanonical" %decimal-128-is-canonical) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadSubtract" %quad-subtract) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadAnd" %quad-and) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decContextRestoreStatus" %context-restore-status) :pointer
  (arg1 :pointer)
  (arg2 conditions)
  (arg3 conditions))

(defcfun ("decNumberSubtract" %number-subtract) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberScaleB" %number-scaleb) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decSingleFromString" %single-from-string) :pointer
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :pointer))

(defcfun ("decimal32ToNumber" %decimal-32-to-number) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decQuadSameQuantum" %quad-same-quantum) :uint32
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleDigits" %double-digits) :uint32
  (arg1 :pointer))

(defcfun ("decSingleVersion" %single-version) :pointer)

(defcfun ("decDoubleIsSignaling" %double-is-signaling) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadCompareSignal" %quad-compare-signal) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoublePlus" %double-plus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decimal32FromNumber" %decimal-32-from-number) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleClass" %double-class) class
  (arg1 :pointer))

(defcfun ("decQuadIsNaN" %quad-is-nan) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decDoubleIsSignalling" %double-is-signalling) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decNumberNextPlus" %number-next-plus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleCompare" %double-compare) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberQuantize" %number-quantize) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleCompareTotal" %double-compare-total) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberMinus" %number-minus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleNextMinus" %double-next-minus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberMinMag" %number-min-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadZero" %quad-zero) :pointer
  (arg1 :pointer))

(defcfun ("decNumberLog10" %number-log10) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadIsSubnormal" %quad-is-subnormal) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decimal64ToNumber" %decimal-64-to-number) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleFMA" %double-fma) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer))

(defcfun ("decDoubleMax" %double-max) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleCompareTotalMag" %double-compare-total-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleGetCoefficient" %double-get-coefficient) :int32
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decContextDefault" %context-default) :pointer
  (arg1 :pointer)
  (arg2 default-context))

(defcfun ("decQuadDivide" %quad-divide) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadCopySign" %quad-copy-sign) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decSingleToString" %single-to-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decSingleToWider" %single-to-wider) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decSingleZero" %single-zero) :pointer
  (arg1 :pointer))

(defcfun ("decQuadClass" %quad-class) class
  (arg1 :pointer))

(defcfun ("decDoubleMin" %double-min) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberExp" %number-exp) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleCopyNegate" %double-copy-negate) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decNumberToInt32" %number-to-int32) :int32
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decSingleToEngString" %single-to-eng-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decNumberToEngString" %number-to-eng-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decSingleSetExponent" %single-set-exponent) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int32))

(defcfun ("decQuadNextPlus" %quad-next-plus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadNextToward" %quad-next-toward) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decContextSaveStatus" %context-save-status) conditions
  (arg1 :pointer)
  (arg2 conditions))

(defcfun ("decDoubleXor" %double-xor) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleToBCD" %double-to-bcd) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberToUInt32" %number-to-uint32) :uint32
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleIsZero" %double-is-zero) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadRotate" %quad-rotate) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberReduce" %number-reduce) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadInvert" %quad-invert) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleIsCanonical" %double-is-canonical) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decNumberCompareTotal" %number-compare-total) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberPlus" %number-plus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decimal128ToNumber" %decimal-128-to-number) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleCopyAbs" %double-copy-abs) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decNumberNextToward" %number-next-toward) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadFMA" %quad-fma) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer))

(defcfun ("decNumberTrim" %number-trim) :pointer
  (arg1 :pointer))

(defcfun ("decQuadFromString" %quad-from-string) :pointer
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :pointer))

(defcfun ("decDoubleShow" %double-show) :void
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleToInt32" %double-to-int32) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 rounding))

(defcfun ("decDoubleIsNegative" %double-is-negative) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadToBCD" %quad-to-bcd) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleToWider" %double-to-wider) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decQuadMin" %quad-min) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decSingleFromPacked" %single-from-packed) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer))

(defcfun ("decDoubleClassString" %double-class-string) :pointer
  (arg1 :pointer))

(defcfun ("decQuadToPacked" %quad-to-packed) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberOr" %number-or) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decSingleToPacked" %single-to-packed) :int32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleVersion" %double-version) :pointer)

(defcfun ("decContextClearStatus" %context-clear-status) :pointer
  (arg1 :pointer)
  (arg2 conditions))

(defcfun ("decNumberSameQuantum" %number-same-quantum) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberCompareSignal" %number-compare-signal) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberClass" %number-class) class
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleFromString" %double-from-string) :pointer
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :pointer))

(defcfun ("decQuadFromPacked" %quad-from-packed) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer))

(defcfun ("decSingleGetCoefficient" %single-get-coefficient) :int32
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decQuadSetCoefficient" %quad-set-coefficient) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int32))

(defcfun ("decQuadXor" %quad-xor) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleDivide" %double-divide) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleFromBCD" %double-from-bcd) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer)
  (arg4 :int32))

(defcfun ("decDoubleQuantize" %double-quantize) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decimal32ToString" %decimal-32-to-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decSingleRadix" %single-radix) :uint32
  (arg1 :pointer))

(defcfun ("decQuadIsLogical" %quad-is-logical) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadGetExponent" %quad-get-exponent) :int32
  (arg1 :pointer))

(defcfun ("decQuadScaleB" %quad-scaleb) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberCompareTotalMag" %number-compare-total-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decContextGetRounding" %context-get-rounding) rounding
  (arg1 :pointer))

(defcfun ("decimal32FromString" %decimal-32-from-string) :pointer
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :pointer))

(defcfun ("decimal64IsCanonical" %decimal-64-is-canonical) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadToUInt32" %quad-to-uint32) :uint32
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 rounding))

(defcfun ("decQuadCopy" %quad-copy) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleNextPlus" %double-next-plus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadOr" %quad-or) :pointer
  (arg1 :pointer) (arg2 :pointer)
  (arg3 :pointer) (arg4 :pointer))

(defcfun ("decNumberMultiply" %number-multiply) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberIsSubnormal" %number-is-subnormal) (:boolean :int32)
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleIsPositive" %double-is-positive) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decNumberCopy" %number-copy) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decPackedFromNumber" %packed-from-number) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleRemainderNear" %double-remainder-near) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadShow" %quad-show) :void
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decimal64ToString" %decimal-64-to-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decDoubleCanonical" %double-canonical) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decNumberPower" %number-power) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleRotate" %double-rotate) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadRemainderNear" %quad-remainder-near) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleInvert" %double-invert) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decimal64Canonical" %decimal-64-canonical) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decNumberAdd" %number-add) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleRemainder" %double-remainder) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleFromUInt32" %double-from-uint32) :pointer
  (arg1 :pointer)
  (arg2 :uint32))

(defcfun ("decDoubleIsLogical" %double-is-logical) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadToIntegralExact" %quad-to-integral-exact) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberRemainder" %number-remainder) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadFromBCD" %quad-from-bcd) :pointer
  (arg1 :pointer)
  (arg2 :int32)
  (arg3 :pointer)
  (arg4 :int32))

(defcfun ("decQuadPlus" %quad-plus) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decSingleShow" %single-show) :void
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decNumberToIntegralValue" %number-to-integral-value) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decContextTestSavedStatus" %context-test-saved-status) conditions
  (arg1 conditions)
  (arg2 conditions))

(defcfun ("decNumberCopyNegate" %number-copy-negate) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decQuadMinMag" %quad-min-mag) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberAnd" %number-and) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decQuadIsInfinite" %quad-is-infinite) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decQuadDivideInteger" %quad-divide-integer) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decDoubleIsSubnormal" %double-is-subnormal) (:boolean :uint32)
  (arg1 :pointer))

(defcfun ("decimal64FromNumber" %decimal-64-from-number) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decNumberLn" %number-ln) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleAdd" %double-add) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(defcfun ("decNumberCopySign" %number-copy-sign) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decQuadLogB" %quad-logb) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decSingleFromWider" %single-from-wider) :pointer
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(defcfun ("decDoubleSameQuantum" %double-same-quantum) :uint32
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decDoubleToString" %double-to-string) (:pointer :char)
  (arg1 :pointer)
  (arg2 (:pointer :char)))

(defcfun ("decQuadCopyNegate" %quad-copy-negate) :pointer
  (arg1 :pointer)
  (arg2 :pointer))

(defcfun ("decSingleGetExponent" %single-get-exponent) :int32
  (arg1 :pointer))
